version: "3.5"
services:
  app:
    env_file:
      - .env
    container_name: nestjs_api
    restart: always
    build: .
    ports:
      - ${NODE_API_PORT}:${NODE_API_PORT}
    links:
      - db
    networks:
      - mynet

  db:
    image: postgres
    volumes:
      - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
    command: postgres -c config_file=/docker-entrypoint-initdb.d/postgresql.conf
    environment:
      PGUSER: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mkstest
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 3s
      timeout: 5s
      retries: 10
    networks:
      - mynet

  redis:
    image: redis
    container_name: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 5s
      retries: 10
    networks:
      - mynet

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - '8081:8081'
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mynet

  db-test:
    image: postgres
    volumes:
      - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
    command: postgres -c config_file=/docker-entrypoint-initdb.d/postgresql.conf
    environment:
      PGUSER: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mkstestjest
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 3s
      timeout: 5s
      retries: 10
    networks:
      - mynet

networks:
  mynet:
    driver: bridge
